{
    "contents" : "# summary of the BE code\n\n# modified from ??rjan's scripts\n####### Sourcing files including external analysis functions ######\n\n# R-functions specific for HL AIL F15 analyses\nsource(file=\"~/Dropbox/home_bin/150121_OCG_RFunctions_HLAILF15.R\")\n\n###### Reading in data ######\n\n## Genotypes and Phenotypes\nload(\"data/epi_full_data.RData\")\nchr_num<-unlist(strsplit(names(full_data$geno),\"[.]\"))[seq(2,length(unlist(strsplit(names(full_data$geno),\"[.]\"))),2)]\nphe<-as.numeric(full_data$pheno$BW8)\nfx1<-as.numeric(full_data$pheno$sex)\n\n# trans-format the genotypes\nmrk_geno<-c()\nmrks_info<-c()\nfor(i in 1:length(full_data$geno)){\n  for(k in 1:ncol(full_data$geno[[i]]$g)){\n    # define genos based on the most frequent allele\n    alles<-table(unlist(strsplit(na.omit(full_data$geno[[i]]$g[,k]),\"\")))\n    minA<-names(alles[order(alles)])[1]\n    majA<-names(alles[order(alles)])[2]\n    oneG<-full_data$geno[[i]]$g[,k]\n    oneG[oneG==paste(minA,minA,sep=\"\")]<-0\n    oneG[oneG==paste(minA,majA,sep=\"\")]<-1\n    oneG[oneG==paste(majA,minA,sep=\"\")]<-1\n    oneG[oneG==paste(majA,majA,sep=\"\")]<-2\n    mrk_geno<-cbind(mrk_geno,as.numeric(oneG))\n  }\n  mrks_info<-rbind(mrks_info,as.matrix(full_data$geno[[i]]$mrk_info))\n}\n\nmrks_info[,2]<- as.numeric(mrks_info[,2])\n#save(mrk_geno,mrks_info,file = \"data/recoded.genotype.RData\")\n# Backward-Elimination within regs\noutdir<-\"results/BE_chr/\"\n#dir.create(outdir,recursive=T)\n\n##\nsigMrk<-c(\"rs13899455\",\"rs13942473\",\"rs15448487\",\"rs14916997\",\"GGaluGA149337\",\"rs15143460\",\"rs15158686\",\"rs15321683\",\"GGaluGA228961\",\"rs14417942\",\"GGaluGA246087\",\"rs15560796\",\"rs14498744\",\"GGaluGA068581\",\"rs14059068\",\"rs15205573\")\n\n\n####### group chr together\n\nchr<- sort(as.numeric(unique(mrks_info[,2])))\n\nfor( i in chr){\n  num<- sum(mrks_info[,2]==i)\n  cat(i, \"-\",num,\"\\n\")\n  \n}\n\n\ngroup<- list(\"1\"=c(1),\"2\"=c(2),\"3\"=c(3),\"4\"=c(4),\"5\"=c(5,6,20),\n             \"6\"=c(7),\"7\"=c(8,9,10,11,12,13),\"8\"=c(14,15,17,18,19,21,22,23,24,25,26,27,28))\n## test how many mark are grouped \n\n#  group wide analysis\nmrk5<- c()\nmrk20<- c()\nfor( i in 1:length(group)){\n  mrksT<-c()\n  for(j in 1:length(group[[i]])){\n    mrksT<- c(mrksT,mrks_info[mrks_info[,2] %in% as.character(group[[i]][j]),1])\n  } \n  cat( \"performing  group \", i ,\" out of \",length(group),\"in total \",length(mrksT),\" mrk included\",\"\\n\")\n  out<- BE_analysis_cov(sigMrk = sigMrk,mrksT = mrksT,mrks_info = mrks_info,mrk_geno = mrk_geno)\n  mrk5<- c(mrk5,out$out5)\n  mrk20<- c(mrk20,out$out20)\n  cat(\"out of \",length(mrksT),\"-\",length(out$out5),\"kept in FDR5 and \",length(out$out20),\"kept in FDR 20\",\"\\n\")\n  cat(\"Total number of mrk is \",length(c(out$out5,out$sub)),\"for fdr5 and \",length(c(out$out20,out$sub)),\"for fdr 20\",\"\\n\")\n}\ncat(length(mrk20))\ncat(length(mrk5))\n\n##### genome wide\n#mrksT<- mrk20\n#out<- BE_analysis_cov(sigMrk = sigMrk,mrksT = mrksT,mrks_info = mrks_info,mrk_geno = mrk_geno)\n#out<- BE_analysis_cov(sigMrk = sigMrk,mrksT = mrksT,mrks_info = mrks_info,mrk_geno = mrk_geno)\n#cat(\"out of \",length(mrksT),\"-\",length(out$out5),\"kept in FDR5 and \",length(out$out20),\"kept in FDR 20\",\"\\n\")\n#mrks_info[mrks_info[,1] %in% out$out20,1:3]\n#mrks_info[mrks_info[,1] %in% unique(c(out$out20,sigMrk)),1:3]\n#mrk_no.bs<-mrks_info[mrks_info[,1] %in% unique(c(out$out20,sigMrk)),1:3]\n#write.table(mrk_no.bs,file=\"results/35_mrk.fdr20.before.bs.txt\",sep=\"\\t\",quote = F,row.names = F)\n#sum(c(out$out20,out$sub) %in% sigMrk)\n\n#variance_ex(mrksT = sigMrk,mrks_info = mrks_info,mrk_geno = mrk_geno)\n#0.38\n#variance_ex(mrksT = unique(c(out$out20,sigMrk)),mrks_info = mrks_info,mrk_geno = mrk_geno)\n#0.45\n\n######### try to do bootstrap\n\n######## all 57 mrk are included\nmrksT<- mrk20\nsigMrk_sub<- sigMrk[!(sigMrk %in% mrksT) ]\n### create full and null model\ncolnames(mrk_geno)<- mrks_info[,1]\nnna<-complete.cases(mrk_geno[,mrks_info[,1] %in% c(mrksT,sigMrk_sub)])\ngeno_reg<-mrk_geno[nna,c(mrksT,sigMrk_sub)]\ntest_phe<-phe[nna]\ntest_fx1<-fx1[nna]\nmydata<-data.frame( cbind(test_phe,test_fx1,geno_reg))\nfm.min<-\"test_phe ~ test_fx1 +\"\nfor( i in 1:length(sigMrk_sub)){\n  fm.min<- paste(fm.min,\"+\",sigMrk_sub[i],sep=\"\")\n}\nfm.min<- as.formula(fm.min)\n# Set variables\nind<-c(1:nrow(geno_reg))\n\n# Set parameters for bootstrap\nFDRBS.q = c(0.05,0.20)\nn_resamples <- 1000\n\n\n## mf =2\nall_bootstraps <- list()\n#for (j in 1:length(FDRBS.q)){\nj=2\nfor (j in 1:length(FDRBS.q)){\n  for (i in 1:n_resamples){\n    print(paste(j,i,sep=\"_\"))\n    bsind <- sample(ind, length(ind),replace=TRUE)\n    bsdata <- mydata[bsind,]\n    fit.max <- lm(test_phe~., data=bsdata)\n    #fit.min <- lm(test_phe~test_fx1, data=bsdata)\n    fit.min<- lm(fm.min, data=bsdata)\n    all_bootstraps[[(j-1)*n_resamples+i]]<-boot_befdr_my(fit.max, fit.min, FDRBS.q[j],mfactor = 2)\n  }\n}\nsave(all_bootstraps,file = \"results/bootstrap_mfactor2.RData\")\nload(\"results/bootstrap_mfactor2.RData\")\n\nfdr5<- c()\ni=1\nfor( j in 1:1000){\n  fdr5<-rbind(fdr5,cbind(rep(1000*(i-1)+j,length(all_bootstraps[[j]])),all_bootstraps[[j]]))\n}\nfinal.boot.5<- names(table(fdr5[,2]))[table(fdr5[,2])> 460]\nfinal.5<-  c(final.boot.5,sigMrk_sub)\n\nfdr.5.sc<- table(fdr5[,2])[table(fdr5[,2])> 460] /1000\n\nfdr20<- c()\ni=2\nfor( j in 1001:2000){\n  fdr20<-rbind(fdr20,cbind(rep(1000*(i-1)+j,length(all_bootstraps[[j]])),all_bootstraps[[j]]))\n}\nfinal.boot.20<- names(table(fdr20[,2]))[table(fdr20[,2])> 460]\nfinal.20<-  c(final.boot.20,sigMrk_sub)\n#save(final.20,file=\"results/final20.mf_x.RData\")\nfdr.20.sc<- table(fdr20[,2])[table(fdr20[,2])> 460] /1000\nre<-mrks_info[mrks_info[,1] %in% c(final.20),1:3]\n#write.table(re,file=\"results/fdr20_BW8.txt\",sep=\"\\t\",quote = F,row.names = F)\n\nvar.5<-variance_ex(mrksT = unique(c(final.5,sigMrk_sub)),mrks_info = mrks_info,mrk_geno = mrk_geno)\nvar.20<-variance_ex(mrksT = unique(c(final.20,sigMrk_sub)),mrks_info = mrks_info,mrk_geno = mrk_geno)\nsum(table(fdr20[,2]))\nsave.image(\"results/160501.final-summary.RData\")\n\n########### some functions\n################# function for cov\nBE_analysis_cov<- function(sigMrk,mrksT,mrks_info=mrks_info,mrk_geno=mrk_geno){\n  if(length(mrksT)==1){\n    id.in5<- mrksT\n    id.in20<- mrksT\n    sigMrk_sub<- sigMrk_sub\n  }else{\n    sigMrk_sub<- sigMrk[!(sigMrk %in% mrksT)]\n    # find the id without missing values\n    colnames(mrk_geno)<- mrks_info[,1]\n    nna<-complete.cases(mrk_geno[,mrks_info[,1] %in% c(mrksT,sigMrk_sub)])\n    geno_reg<-mrk_geno[nna,c(mrksT,sigMrk_sub)]\n    # Fit the full model including all markers within the reg\n    id.full<- which(colnames(geno_reg) %in% c(mrksT,sigMrk_sub))\n    geno_add <- paste(\"as.numeric(geno_reg[,\",id.full,\"])\",sep=\"\",collapse=\"+\")\n    test_phe<-phe[nna]\n    test_fx1<-fx1[nna]\n    fm <- as.formula(paste(\"test_phe ~ test_fx1 +\",geno_add,sep=\"\"))\n    reg.lm <- lm(fm, y=TRUE)\n    \n    # min model\n    id.min<-c(1:ncol(geno_reg))[colnames(geno_reg) %in% sigMrk_sub]\n    geno_bc.add<-paste(\"as.numeric(geno_reg[,\",id.min,\"])\",sep=\"\",collapse=\"+\")\n    fm.min<- as.formula(paste(\"test_phe ~ test_fx1 +\",geno_bc.add,sep=\"\"))\n    min.lm <- lm(fm.min,y=TRUE)\n    \n    #Perform Backward-Elimination in the original data at different adaptive FDR thresholds\n    fitFDR5<-BEFDR( minimal.lm = min.lm, maximal.lm = reg.lm, FDR.q = 0.05,mfactor=1)\n    \n    if(sum(grepl(\"geno_reg\",rownames(summary(fitFDR5)$coefficients)))>0){\n      terms5<-rownames(summary(fitFDR5)$coefficients)[grep(\"geno_reg\",rownames(summary(fitFDR5)$coefficients))]\n      idx5<-unlist(strsplit(terms5,\",|[]]\"))\n      name5<-colnames(geno_reg)[as.numeric(idx5[seq(2,length(idx5),3)])]\n      id.in5<- name5[!(name5%in% sigMrk_sub)]\n      #mrks5<-c(mrks5,id.in5)\n      #out5[[as.numeric(i)]]<- id.in5\n    }\n    \n    fitFDR20<-BEFDR( minimal.lm = min.lm, maximal.lm = reg.lm, FDR.q = 0.2,mfactor=1)\n    \n    if(sum(grepl(\"geno_reg\",rownames(summary(fitFDR20)$coefficients)))>0){\n      terms20<-rownames(summary(fitFDR20)$coefficients)[grep(\"geno_reg\",rownames(summary(fitFDR20)$coefficients))]\n      idx20<-unlist(strsplit(terms20,\",|[]]\"))\n      name20<-colnames(geno_reg)[as.numeric(idx20[seq(2,length(idx20),3)])]\n      id.in20<- name20[!(name20%in% sigMrk_sub)]\n      #mrks20<-c(mrks20,id.in20)\n      #out20[[as.numeric(i)]]<- id.in20\n    }\n  }\n  return(list(\"out5\"=id.in5,\"out20\"=id.in20,\"sub\"=sigMrk_sub))\n}\n################# function for no cov\n\nBE_analysis_no_cov<- function(mrksT,mrks_info=mrks_info,mrk_geno=mrk_geno){\n  if(length(mrksT)==1){\n    id.in5<- mrksT\n    id.in20<- mrksT\n    #sigMrk_sub<- sigMrk_sub\n  }else{\n    #sigMrk_sub<- sigMrk[!(sigMrk %in% mrksT)]\n    # find the id without missing values\n    colnames(mrk_geno)<- mrks_info[,1]\n    nna<-complete.cases(mrk_geno[,mrks_info[,1] %in% mrksT])\n    geno_reg<-mrk_geno[nna,mrksT]\n    # Fit the full model including all markers within the reg\n    id.full<- which(colnames(geno_reg) %in% mrksT)\n    geno_add <- paste(\"as.numeric(geno_reg[,\",id.full,\"])\",sep=\"\",collapse=\"+\")\n    test_phe<-phe[nna]\n    test_fx1<-fx1[nna]\n    fm <- as.formula(paste(\"test_phe ~ test_fx1 +\",geno_add,sep=\"\"))\n    reg.lm <- lm(fm, y=TRUE)\n    \n    # min model\n    #id.min<-c(1:ncol(geno_reg))[colnames(geno_reg) %in% sigMrk_sub]\n    #geno_bc.add<-paste(\"as.numeric(geno_reg[,\",id.min,\"])\",sep=\"\",collapse=\"+\")\n    #fm.min<- as.formula(paste(\"test_phe ~ test_fx1 +\",geno_bc.add,sep=\"\"))\n    #min.lm <- lm(fm.min,y=TRUE)\n    min.lm <- lm(test_phe ~ test_fx1)\n    #Perform Backward-Elimination in the original data at different adaptive FDR thresholds\n    fitFDR5<-BEFDR( minimal.lm = min.lm, maximal.lm = reg.lm, FDR.q = 0.05,mfactor=1)\n    \n    if(sum(grepl(\"geno_reg\",rownames(summary(fitFDR5)$coefficients)))>0){\n      terms5<-rownames(summary(fitFDR5)$coefficients)[grep(\"geno_reg\",rownames(summary(fitFDR5)$coefficients))]\n      idx5<-unlist(strsplit(terms5,\",|[]]\"))\n      name5<-colnames(geno_reg)[as.numeric(idx5[seq(2,length(idx5),3)])]\n      id.in5<- name5[(name5%in% mrksT)]\n      #mrks5<-c(mrks5,id.in5)\n      #out5[[as.numeric(i)]]<- id.in5\n    }\n    \n    fitFDR20<-BEFDR( minimal.lm = min.lm, maximal.lm = reg.lm, FDR.q = 0.2,mfactor=1)\n    \n    if(sum(grepl(\"geno_reg\",rownames(summary(fitFDR20)$coefficients)))>0){\n      terms20<-rownames(summary(fitFDR20)$coefficients)[grep(\"geno_reg\",rownames(summary(fitFDR20)$coefficients))]\n      idx20<-unlist(strsplit(terms20,\",|[]]\"))\n      name20<-colnames(geno_reg)[as.numeric(idx20[seq(2,length(idx20),3)])]\n      id.in20<- name20[(name20%in% mrksT)]\n      #mrks20<-c(mrks20,id.in20)\n      #out20[[as.numeric(i)]]<- id.in20\n    }\n  }\n  return(list(\"out5\"=id.in5,\"out20\"=id.in20))\n}\n######## function variance explaned\n#mrksT<- unique(c(out$out20,sigMrk))\nvariance_ex<- function(mrksT,mrks_info=mrks_info,mrk_geno=mrk_geno){\n  colnames(mrk_geno)<- mrks_info[,1]\n  nna<-complete.cases(mrk_geno[,mrks_info[,1] %in% mrksT])\n  geno_reg<-mrk_geno[nna,mrksT]\n  # Fit the full model including all markers within the reg\n  id.full<- which(colnames(geno_reg) %in% mrksT)\n  geno_add <- paste(\"as.numeric(geno_reg[,\",id.full,\"])\",sep=\"\",collapse=\"+\")\n  test_phe<-phe[nna]\n  test_fx1<-fx1[nna]\n  fm <- as.formula(paste(\"test_phe ~ test_fx1 +\",geno_add,sep=\"\"))\n  reg.lm <- lm(fm, y=TRUE)\n  sum.reg<- summary(reg.lm)\n  #y.hat<- influence(reg.lm)$hat\n  return(list(\"adj.r.squred\"=sum.reg$adj.r.squared,\"reg\"=reg.lm))\n}\n# boot be\n#maximalbs.lm<- fit.max\n#minimalbs.lm<- fit.min\n#FDRBS.q<-0.05\nboot_befdr_my<- function(maximalbs.lm, minimalbs.lm, FDRBS.q,mfactor=1) {\n  fitFDRBS <- BEFDR( maximal.lm = maximalbs.lm, minimal.lm = minimalbs.lm, FDR.q = FDRBS.q, mfactor)\n  # Extract markers fitted in final model\n  fitFDRBS.sum<-summary(fitFDRBS)\n  tmp <- rownames(fitFDRBS.sum$coefficients)\n  tmp<- tmp[3:length(tmp)]\n  min.sum<- summary(minimalbs.lm)\n  tmp2 <- rownames(min.sum$coefficients)\n  tmp2<- tmp2[3:length(tmp2)]\n  \n  fitted.mrks <- tmp[!(tmp %in% tmp2)]\n  return(fitted.mrks)\n}\n\n\n",
    "created" : 1484822105025.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1639467869",
    "id" : "1ABBA99E",
    "lastKnownWriteTime" : 1463659512,
    "path" : "~/Dropbox/home_bin/160501-final_BE.Zheya-data.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}